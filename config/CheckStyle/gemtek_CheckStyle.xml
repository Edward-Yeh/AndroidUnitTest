<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<!-- Generated by Edward Yeh -->

<module name="Checker">

    <property name="charset" value="UTF-8"/>

    <!-- severity: value=error causes build fail -->
    <property name="severity" value="warning"/>

    <!-- Checks that there are no tab characters ('\t') in the source code. -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <!-- Checks for long source files. -->
    <module name="FileLength">
        <property name="max" value="1000"/>
    </module>

    <module name="TreeWalker">

        <!-- Block Checks -->

        <!-- option: 定义左大括号'{'显示位置，eol在同一行显示，nl在下一行显示 -->
        <module name="LeftCurly">
            <property name="option" value="eol"/>
        </module>

        <!-- 检查是否应该使用括号的地方没有加括号 -->
        <module name="NeedBraces"/>

        <!--
            Checks the placement of right curly braces ('}') for else, try, and catch tokens.
            option: 右大括号是否单独一行显示
        -->
        <module name="RightCurly">
            <property name="option" value="same"/>
        </module>

        <!-- Coding -->

        <!-- Detects empty statements (standalone ";" semicolon). -->
        <module name="EmptyStatement"/>

        <!--
            String nullString = null;
            "My_Sweet_String".equals(nullString);
        -->
        <module name="EqualsAvoidNull"/>

        <!--检查switch中case后是否加入了跳出语句，例如：return、break、throw、continue -->
        <module name="FallThrough"/>

        <!--
            Checks for illegal instantiations where a factory method is preferred.

            Rationale: Depending on the project, for some classes it might be preferable to
            create instances through factory methods rather than calling the constructor.

            A simple example is the java.lang.Boolean class. In order to save memory and CPU cycles,
            it is preferable to use the predefined constants TRUE and FALSE. Constructor invocations
            should be replaced by calls to Boolean.valueOf().
        -->
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean"/>
        </module>

        <!-- Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2); -->
        <module name="InnerAssignment"/>

        <!--
            Checks that switch statement has "default" clause.

            Rationale: It's usually a good idea to introduce a default case in every switch statement.
            Even if the developer is sure that all currently possible cases are covered,
            this should be expressed in the default branch, e.g. by using an assertion.
            This way the code is protected against later changes, e.g. introduction of new types
            in an enumeration type.
        -->
        <module name="MissingSwitchDefault"/>

        <!--
             for (int i = 0; i < 1; i++) {
               i++; //violation
             }
        -->
        <module name="ModifiedControlVariable"/>

        <!-- 每一行只能定义一个变量 -->
        <module name="MultipleVariableDeclarations"/>

        <!-- if-else嵌套语句个数 最多3层 -->
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>

        <!-- try-catch 嵌套语句个数 最多2层 -->
        <module name="NestedTryDepth">
            <property name="max" value="2"/>
        </module>

        <!--
            Checks that there is only one statement per line.
            Rationale: It's very difficult to read multiple statements on one line.
         -->
        <module name="OneStatementPerLine"/>


        <!--
            Checks for overly complicated boolean expressions.
            Currently finds code like  if (b == true), b || true, !false, etc.

            Rationale: Complex boolean logic makes code hard to understand and maintain.
        -->
        <module name="SimplifyBooleanExpression"/>

        <!--- 字符串比较必须使用 equals() -->
        <module name="StringLiteralEquality"/>

        <!-- Imports -->

        <!-- 必须导入类的完整路径，即不能使用*导入所需的类 -->
        <module name="AvoidStarImport"/>

        <!-- 检查是否从非法的包中导入了类 illegalPkgs: 定义非法的包名称-->
        <module name="IllegalImport"/>

        <!-- 检查是否导入了不必显示导入的类-->
        <module name="RedundantImport"/>

        <!-- 检查是否导入的包没有使用-->
        <module name="UnusedImports"/>

        <!-- Metrics -->

        <module name="CyclomaticComplexity">
            <property name="max" value="5"/>
        </module>

        <!-- Miscellaneous -->

        <!--
            Checks the style of array type definitions.
            Some like Java-style: public static void main(String[] args)
            and some like C-style: public static void main(String args[])
        -->
        <module name="ArrayTypeStyle">
            <property name="javaStyle" value="true"/>
        </module>

        <!-- 代码缩进   -->
        <module name="Indentation">
            <property name="lineWrappingIndentation" value="8"/>
        </module>

        <!-- 检查是否存在TODO（待处理） TODO是javaIDE自动生成的。一般代码写完后要去掉。 -->
        <module name="TodoComment">
            <property name="format" value="(TODO)|(FIXME)"/>
        </module>

        <!-- 检查是否在long类型是否定义了大写的L.字母小写l和数字1（一）很相似。 looks a lot like 1. -->
        <module name="UpperEll"/>

        <!-- Modifiers -->

        <!--
            检查修饰符的顺序。默认是 public, protected, private, abstract, static, final,
            transient, volatile, synchronized, native
        -->
        <module name="ModifierOrder"/>

        <!-- 检查是否有多余的修饰符，例如：接口中的方法不必使用public、abstract修饰  -->
        <module name="RedundantModifier"/>

        <!-- Naming Conventions -->

        <!-- constants (static, final fields) -->
        <module name="ConstantName">
            <property name="format" value="(^[A-Z0-9_]{0,29}$)"/>
        </module>

        <!-- local, final variables, including catch parameters -->
        <module name="LocalFinalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <!-- local, non-final variables, including catch parameters-->
        <module name="LocalVariableName">
            <property name="allowOneCharVarInForLoop" value="true"/>
        </module>

        <!-- Validates identifiers for non-static fields -->
        <module name="MemberName">
            <property name="format" value="^m[A-Z][a-zA-Z0-9]*$"/>
            <!--<property name="format" value="(^[a-z][a-zA-Z0-9]{0,29}$)"/>-->
        </module>

        <!-- methods -->
        <module name="MethodName">
            <property name="format" value="(^[a-z][a-zA-Z0-9]{0,29}$)"/>
        </module>

        <!-- packages -->
        <module name="PackageName" >
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
        </module>

        <!-- parameters -->
        <module name="ParameterName">
            <property name="format" value="(^[a-z][a-zA-Z0-9_]{0,29}$)"/>
        </module>

        <!-- static, non-final fields -->
        <module name="StaticVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]{0,29}$"/>
        </module>

        <!-- classes, interfaces, enums, and annotations -->
        <module name="TypeName">
            <property name="format" value="(^[A-Z][a-zA-Z0-9]{0,29}$)"/>
        </module>

        <!-- Size Violations -->

        <!-- 每行字元数 -->
        <module name="LineLength">
            <property name="max" value="200"/>
        </module>

        <!-- Checks for long methods and constructors. max default 150行. max=300 设置长度300 -->
        <module name="MethodLength">
            <property name="max" value="50"/>
            <property name="countEmpty" value="false"/>
        </module>

        <!-- Checks the number of parameters of a method or constructor. -->
        <module name="ParameterNumber">
            <property name="max" value="7"/>
        </module>

        <!-- Whitespace -->

        <!--
            Checks for empty line separators after header, package, all import declarations,
            fields, constructors, methods, nested classes, static initializer and instance
            initializer.
        -->
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>

        <module name="EmptyForInitializerPad"/>
        <module name="EmptyForIteratorPad"/>
        <module name="GenericWhitespace"/>
        <module name="MethodParamPad"/>
        <module name="NoLineWrap"/>
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>
    </module>
</module>